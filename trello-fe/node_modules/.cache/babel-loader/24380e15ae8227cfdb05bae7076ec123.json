{"ast":null,"code":"var _jsxFileName = \"E:\\\\Blameo\\\\BaseProject\\\\React\\\\Ha\\\\trello-fe\\\\src\\\\pages\\\\List\\\\List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { Button, Dropdown, Modal } from 'antd';\nimport { createWorkList, getAllWorkList, updateDisplayOrderTask, updateDisplayOrderWorkList, deleteWorkList } from '../../Api/func/user';\nimport { PlusOutlined, CloseOutlined, DashOutlined } from '@ant-design/icons';\nimport Cards from '../Card/Cards';\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Title from '../Title/Title';\nimport './list.css';\nimport { applyDrag } from '../../utils/dragDrop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List(props) {\n  _s();\n\n  const [lists, setLists] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [workList, setworkList] = useState();\n  const [addId, setAddId] = useState(-1);\n  const [removeId, setRemoveId] = useState(-1);\n  const [addedIndex, setAddedIndex] = useState(-1);\n  const [removedIndex, setRemovedIndex] = useState(-1);\n  const fetchData = useCallback(async () => {\n    reload();\n  }, []);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const onSubmit = async () => {\n    await createWorkList({\n      boardId: props.id,\n      title: workList\n    });\n    reload();\n    setOpen(false);\n  };\n\n  const reload = async () => {\n    const res = await getAllWorkList({\n      boardId: props.id\n    });\n\n    if (res.data != null) {\n      setLists(res.data);\n    }\n  };\n\n  const resetTitle = (workListId, title) => {\n    let newColums = [...lists];\n    newColums = newColums.map(x => {\n      if (x.workListId === workListId) {\n        x.title = title;\n      }\n\n      return x;\n    });\n    setLists(newColums);\n  };\n\n  const onColumnDrop = async dropResult => {\n    let newColums = [...lists];\n    newColums = applyDrag(newColums, dropResult);\n    setLists(newColums);\n    await updateDisplayOrderWorkList({\n      boardId: props.id,\n      addedIndex: dropResult.addedIndex,\n      removeIndex: dropResult.removedIndex\n    });\n  };\n\n  const updateTask = async () => {\n    await updateDisplayOrderTask({\n      removeId: removeId,\n      removedIndex: removedIndex,\n      addId: addId,\n      addedIndex: addedIndex\n    });\n  };\n\n  const onCardDrop = (workListId, dropResult) => {\n    if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n      let newColums = [...lists];\n      let currenColumn = newColums.find(x => x.workListId === workListId);\n      currenColumn.tasks = applyDrag(currenColumn.tasks, dropResult);\n      setLists(newColums);\n\n      if (dropResult.removedIndex !== null) {\n        setRemoveId(workListId);\n        setRemovedIndex(dropResult.removedIndex);\n      }\n\n      if (dropResult.addedIndex !== null) {\n        setAddId(workListId);\n        setAddedIndex(dropResult.addedIndex);\n      }\n\n      console.log(dropResult);\n    }\n  };\n\n  if (addedIndex !== -1 && addId !== -1 && removedIndex !== -1 && removeId !== -1) {\n    updateTask();\n    setAddId(-1);\n    setAddedIndex(-1);\n    setRemovedIndex(-1);\n    setRemoveId(-1);\n  } // delete workList\n\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [listId, setListId] = useState(\"\");\n\n  const showModal = listId => {\n    setListId(listId);\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleDeleteList = () => {\n    deleteList(listId);\n    setIsModalVisible(false);\n  };\n\n  function deleteList(id) {\n    let newColums = [...lists];\n    let displayOrder = newColums.find(x => x.workListId === id).displayOrder;\n    newColums = newColums.filter(x => x.workListId !== id);\n    newColums = newColums.map(x => {\n      if (x.displayOrder > displayOrder) {\n        x.displayOrder = x.displayOrder - 1;\n      }\n\n      return x;\n    });\n    setLists(newColums);\n    deleteWL(id);\n  }\n\n  const deleteWL = async id => {\n    await deleteWorkList({\n      workListId: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      background: \"green\",\n      overflow: 'scroll',\n      height: '82vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      orientation: \"horizontal\",\n      onDrop: onColumnDrop,\n      getChildPayload: index => lists[index],\n      dropPlaceholder: {\n        animationDuration: 150,\n        showOnTop: true,\n        className: 'cards-drop-preview'\n      },\n      children: lists.map((list, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(Title, {\n              listId: list.workListId,\n              title: list.title,\n              resetTitle: resetTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              trigger: \"click\",\n              overlay: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => showModal(list.id),\n                style: {\n                  border: 'none',\n                  padding: '10px',\n                  color: '#000',\n                  borderRadius: '3px',\n                  cursor: 'pointer'\n                },\n                children: \"Delete List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 46\n              }, this),\n              placement: \"bottomLeft\",\n              children: /*#__PURE__*/_jsxDEV(DashOutlined, {\n                style: {\n                  cursor: 'pointer'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-list\",\n            children: /*#__PURE__*/_jsxDEV(Cards, {\n              task: list.tasks,\n              workListId: list.workListId,\n              reload: reload,\n              onCardDrop: onCardDrop\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Alert !!!\",\n      visible: isModalVisible,\n      width: 400,\n      onOk: handleDeleteList,\n      onCancel: handleCancel,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Do you want to delete this list?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: open ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          onChange: e => setworkList(e.target.value),\n          type: \"text\",\n          placeholder: \"Enter a title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: onSubmit,\n          children: \"Add list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CloseOutlined, {\n          onClick: () => setOpen(false),\n          style: {\n            cursor: 'pointer',\n            marginLeft: '20px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        className: \"add-new-list\",\n        onClick: () => setOpen(!open),\n        children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this), \" Add New List\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n_s(List, \"Ga75Asf4M8UX1Jp3ohvL/Wojlfk=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["E:/Blameo/BaseProject/React/Ha/trello-fe/src/pages/List/List.js"],"names":["React","useEffect","useState","useCallback","Button","Dropdown","Modal","createWorkList","getAllWorkList","updateDisplayOrderTask","updateDisplayOrderWorkList","deleteWorkList","PlusOutlined","CloseOutlined","DashOutlined","Cards","Container","Draggable","Title","applyDrag","List","props","lists","setLists","open","setOpen","workList","setworkList","addId","setAddId","removeId","setRemoveId","addedIndex","setAddedIndex","removedIndex","setRemovedIndex","fetchData","reload","onSubmit","boardId","id","title","res","data","resetTitle","workListId","newColums","map","x","onColumnDrop","dropResult","removeIndex","updateTask","onCardDrop","currenColumn","find","tasks","console","log","isModalVisible","setIsModalVisible","listId","setListId","showModal","handleCancel","handleDeleteList","deleteList","displayOrder","filter","deleteWL","display","background","overflow","height","index","animationDuration","showOnTop","className","list","border","padding","color","borderRadius","cursor","e","target","value","marginLeft"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,QAAwC,MAAxC;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,sBAAzC,EAAiEC,0BAAjE,EAA6FC,cAA7F,QAAmH,qBAAnH;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,YAAtC,QAA0D,mBAA1D;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,kBAArC;AACA,OAAO,sCAAP;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,YAAP;AACA,SAASC,SAAT,QAA0B,sBAA1B;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,EAAxC;AAEA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,CAAC,CAAF,CAAlC;AACA,QAAM,CAAC4B,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,CAAC,CAAF,CAAxC;AACA,QAAM,CAAC8B,UAAD,EAAaC,aAAb,IAA8B/B,QAAQ,CAAC,CAAC,CAAF,CAA5C;AACA,QAAM,CAACgC,YAAD,EAAeC,eAAf,IAAkCjC,QAAQ,CAAC,CAAC,CAAF,CAAhD;AAEA,QAAMkC,SAAS,GAAGjC,WAAW,CAAC,YAAY;AACtCkC,IAAAA,MAAM;AACT,GAF4B,EAE1B,EAF0B,CAA7B;AAIApC,EAAAA,SAAS,CAAC,MAAM;AACZmC,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,QAAME,QAAQ,GAAG,YAAY;AACzB,UAAM/B,cAAc,CAAC;AACjBgC,MAAAA,OAAO,EAAElB,KAAK,CAACmB,EADE;AAEjBC,MAAAA,KAAK,EAAEf;AAFU,KAAD,CAApB;AAIAW,IAAAA,MAAM;AACNZ,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAPD;;AAQA,QAAMY,MAAM,GAAG,YAAY;AACvB,UAAMK,GAAG,GAAG,MAAMlC,cAAc,CAAC;AAC7B+B,MAAAA,OAAO,EAAElB,KAAK,CAACmB;AADc,KAAD,CAAhC;;AAGA,QAAIE,GAAG,CAACC,IAAJ,IAAY,IAAhB,EAAsB;AAClBpB,MAAAA,QAAQ,CAACmB,GAAG,CAACC,IAAL,CAAR;AACH;AACJ,GAPD;;AASA,QAAMC,UAAU,GAAG,CAACC,UAAD,EAAaJ,KAAb,KAAsB;AACrC,QAAIK,SAAS,GAAG,CAAC,GAAGxB,KAAJ,CAAhB;AACAwB,IAAAA,SAAS,GAAGA,SAAS,CAACC,GAAV,CAAcC,CAAC,IAAI;AAC3B,UAAGA,CAAC,CAACH,UAAF,KAAiBA,UAApB,EAA+B;AAC3BG,QAAAA,CAAC,CAACP,KAAF,GAAUA,KAAV;AACH;;AACD,aAAOO,CAAP;AACH,KALW,CAAZ;AAMAzB,IAAAA,QAAQ,CAACuB,SAAD,CAAR;AACH,GATD;;AAWA,QAAMG,YAAY,GAAG,MAAOC,UAAP,IAAsB;AACvC,QAAIJ,SAAS,GAAG,CAAC,GAAGxB,KAAJ,CAAhB;AACAwB,IAAAA,SAAS,GAAG3B,SAAS,CAAC2B,SAAD,EAAYI,UAAZ,CAArB;AACA3B,IAAAA,QAAQ,CAACuB,SAAD,CAAR;AACA,UAAMpC,0BAA0B,CAAC;AAC7B6B,MAAAA,OAAO,EAAElB,KAAK,CAACmB,EADc;AAE7BR,MAAAA,UAAU,EAAEkB,UAAU,CAAClB,UAFM;AAG7BmB,MAAAA,WAAW,EAAED,UAAU,CAAChB;AAHK,KAAD,CAAhC;AAKH,GATD;;AAWA,QAAMkB,UAAU,GAAG,YAAY;AAC3B,UAAM3C,sBAAsB,CAAC;AACzBqB,MAAAA,QAAQ,EAAEA,QADe;AAEzBI,MAAAA,YAAY,EAAEA,YAFW;AAGzBN,MAAAA,KAAK,EAAEA,KAHkB;AAIzBI,MAAAA,UAAU,EAAEA;AAJa,KAAD,CAA5B;AAMH,GAPD;;AAQA,QAAMqB,UAAU,GAAG,CAACR,UAAD,EAAaK,UAAb,KAA4B;AAC3C,QAAIA,UAAU,CAAChB,YAAX,KAA4B,IAA5B,IAAoCgB,UAAU,CAAClB,UAAX,KAA0B,IAAlE,EAAwE;AACpE,UAAIc,SAAS,GAAG,CAAC,GAAGxB,KAAJ,CAAhB;AACA,UAAIgC,YAAY,GAAGR,SAAS,CAACS,IAAV,CAAeP,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBA,UAArC,CAAnB;AACAS,MAAAA,YAAY,CAACE,KAAb,GAAqBrC,SAAS,CAACmC,YAAY,CAACE,KAAd,EAAqBN,UAArB,CAA9B;AACA3B,MAAAA,QAAQ,CAACuB,SAAD,CAAR;;AACA,UAAII,UAAU,CAAChB,YAAX,KAA4B,IAAhC,EAAsC;AAClCH,QAAAA,WAAW,CAACc,UAAD,CAAX;AACAV,QAAAA,eAAe,CAACe,UAAU,CAAChB,YAAZ,CAAf;AACH;;AACD,UAAIgB,UAAU,CAAClB,UAAX,KAA0B,IAA9B,EAAoC;AAChCH,QAAAA,QAAQ,CAACgB,UAAD,CAAR;AACAZ,QAAAA,aAAa,CAACiB,UAAU,CAAClB,UAAZ,CAAb;AAEH;;AACDyB,MAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;AACH;AACJ,GAjBD;;AAkBA,MAAIlB,UAAU,KAAK,CAAC,CAAhB,IAAqBJ,KAAK,KAAK,CAAC,CAAhC,IAAqCM,YAAY,KAAK,CAAC,CAAvD,IAA4DJ,QAAQ,KAAK,CAAC,CAA9E,EAAiF;AAC7EsB,IAAAA,UAAU;AACVvB,IAAAA,QAAQ,CAAC,CAAC,CAAF,CAAR;AACAI,IAAAA,aAAa,CAAC,CAAC,CAAF,CAAb;AACAE,IAAAA,eAAe,CAAC,CAAC,CAAF,CAAf;AACAJ,IAAAA,WAAW,CAAC,CAAC,CAAF,CAAX;AACH,GAzFgB,CA0FjB;;;AACA,QAAM,CAAC4B,cAAD,EAAiBC,iBAAjB,IAAsC1D,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC2D,MAAD,EAASC,SAAT,IAAsB5D,QAAQ,CAAC,EAAD,CAApC;;AACA,QAAM6D,SAAS,GAAIF,MAAD,IAAY;AAC1BC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAD,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,GAHD;;AAIA,QAAMI,YAAY,GAAG,MAAM;AACvBJ,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,GAFD;;AAGA,QAAMK,gBAAgB,GAAG,MAAM;AAC3BC,IAAAA,UAAU,CAACL,MAAD,CAAV;AACAD,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,GAHD;;AAIA,WAASM,UAAT,CAAoB1B,EAApB,EAAwB;AACpB,QAAIM,SAAS,GAAG,CAAC,GAAGxB,KAAJ,CAAhB;AACA,QAAI6C,YAAY,GAAGrB,SAAS,CAACS,IAAV,CAAeP,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBL,EAArC,EAAyC2B,YAA5D;AACArB,IAAAA,SAAS,GAAGA,SAAS,CAACsB,MAAV,CAAiBpB,CAAC,IAAIA,CAAC,CAACH,UAAF,KAAiBL,EAAvC,CAAZ;AACAM,IAAAA,SAAS,GAAGA,SAAS,CAACC,GAAV,CAAcC,CAAC,IAAI;AAC3B,UAAIA,CAAC,CAACmB,YAAF,GAAiBA,YAArB,EAAmC;AAC/BnB,QAAAA,CAAC,CAACmB,YAAF,GAAiBnB,CAAC,CAACmB,YAAF,GAAiB,CAAlC;AACH;;AACD,aAAOnB,CAAP;AACH,KALW,CAAZ;AAMAzB,IAAAA,QAAQ,CAACuB,SAAD,CAAR;AACAuB,IAAAA,QAAQ,CAAC7B,EAAD,CAAR;AAEH;;AACD,QAAM6B,QAAQ,GAAG,MAAO7B,EAAP,IAAc;AAC3B,UAAM7B,cAAc,CAAC;AACjBkC,MAAAA,UAAU,EAAEL;AADK,KAAD,CAApB;AAGH,GAJD;;AAMA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAE8B,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,UAAU,EAAE,OAA/B;AAAwCC,MAAAA,QAAQ,EAAE,QAAlD;AAA4DC,MAAAA,MAAM,EAAE;AAApE,KAAZ;AAAA,4BACI,QAAC,SAAD;AACI,MAAA,WAAW,EAAC,YADhB;AAEI,MAAA,MAAM,EAAExB,YAFZ;AAGI,MAAA,eAAe,EAAEyB,KAAK,IAAIpD,KAAK,CAACoD,KAAD,CAHnC;AAII,MAAA,eAAe,EAAE;AACbC,QAAAA,iBAAiB,EAAE,GADN;AAEbC,QAAAA,SAAS,EAAE,IAFE;AAGbC,QAAAA,SAAS,EAAE;AAHE,OAJrB;AAAA,gBASKvD,KAAK,CAACyB,GAAN,CAAU,CAAC+B,IAAD,EAAOJ,KAAP,kBACP,QAAC,SAAD;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,MAAM,EAAEI,IAAI,CAACjC,UAApB;AAAgC,cAAA,KAAK,EAAEiC,IAAI,CAACrC,KAA5C;AAAmD,cAAA,UAAU,EAAEG;AAA/D;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,QAAD;AAAU,cAAA,OAAO,EAAC,OAAlB;AACI,cAAA,OAAO,eAAE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAE,MAAMmB,SAAS,CAACe,IAAI,CAACtC,EAAN,CAAhC;AACL,gBAAA,KAAK,EAAE;AAAEuC,kBAAAA,MAAM,EAAE,MAAV;AAAkBC,kBAAAA,OAAO,EAAE,MAA3B;AAAmCC,kBAAAA,KAAK,EAAE,MAA1C;AAAkDC,kBAAAA,YAAY,EAAE,KAAhE;AAAuEC,kBAAAA,MAAM,EAAE;AAA/E,iBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADb;AAKI,cAAA,SAAS,EAAC,YALd;AAAA,qCAMI,QAAC,YAAD;AAAc,gBAAA,KAAK,EAAE;AAAEA,kBAAAA,MAAM,EAAE;AAAV;AAArB;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAYI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,mCACI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAEL,IAAI,CAACtB,KAAlB;AAAyB,cAAA,UAAU,EAAEsB,IAAI,CAACjC,UAA1C;AAAsD,cAAA,MAAM,EAAER,MAA9D;AAAsE,cAAA,UAAU,EAAEgB;AAAlF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,SAAgBqB,KAAhB;AAAA;AAAA;AAAA;AAAA,cADH;AATL;AAAA;AAAA;AAAA;AAAA,YADJ,eA+BI,QAAC,KAAD;AAAO,MAAA,KAAK,EAAC,WAAb;AAAyB,MAAA,OAAO,EAAEf,cAAlC;AAAkD,MAAA,KAAK,EAAE,GAAzD;AAA8D,MAAA,IAAI,EAAEM,gBAApE;AACI,MAAA,QAAQ,EAAED,YADd;AAAA,6BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YA/BJ,eAmCI;AAAA,gBACKxC,IAAI,gBACD;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACI;AAAO,UAAA,SAAS,EAAC,OAAjB;AAAyB,UAAA,QAAQ,EAAE4D,CAAC,IAAIzD,WAAW,CAACyD,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnD;AAAqE,UAAA,IAAI,EAAC,MAA1E;AAAiF,UAAA,WAAW,EAAC;AAA7F;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,SAAS,EAAC,QAAlB;AAA2B,UAAA,OAAO,EAAEhD,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,aAAD;AAAe,UAAA,OAAO,EAAE,MAAMb,OAAO,CAAC,KAAD,CAArC;AAA8C,UAAA,KAAK,EAAE;AAAE0D,YAAAA,MAAM,EAAE,SAAV;AAAqBI,YAAAA,UAAU,EAAE;AAAjC;AAArD;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADC,gBAOD,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,OAAO,EAAE,MAAM9D,OAAO,CAAC,CAACD,IAAF,CAAvD;AAAA,gCACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AARR;AAAA;AAAA;AAAA;AAAA,YAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDH;;GA/KQJ,I;;KAAAA,I;AAiLT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Button, Dropdown, Modal } from 'antd';\r\nimport { createWorkList, getAllWorkList, updateDisplayOrderTask, updateDisplayOrderWorkList, deleteWorkList } from '../../Api/func/user';\r\nimport { PlusOutlined, CloseOutlined, DashOutlined } from '@ant-design/icons';\r\nimport Cards from '../Card/Cards';\r\nimport { Container, Draggable } from 'react-smooth-dnd';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Title from '../Title/Title';\r\nimport './list.css';\r\nimport { applyDrag } from '../../utils/dragDrop';\r\n\r\nfunction List(props) {\r\n    const [lists, setLists] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [workList, setworkList] = useState();\r\n\r\n    const [addId, setAddId] = useState(-1);\r\n    const [removeId, setRemoveId] = useState(-1);\r\n    const [addedIndex, setAddedIndex] = useState(-1);\r\n    const [removedIndex, setRemovedIndex] = useState(-1);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        reload();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData])\r\n\r\n    const onSubmit = async () => {\r\n        await createWorkList({\r\n            boardId: props.id,\r\n            title: workList\r\n        });\r\n        reload();\r\n        setOpen(false);\r\n    }\r\n    const reload = async () => {\r\n        const res = await getAllWorkList({\r\n            boardId: props.id\r\n        });\r\n        if (res.data != null) {\r\n            setLists(res.data);\r\n        }\r\n    }\r\n\r\n    const resetTitle = (workListId, title) =>{\r\n        let newColums = [...lists]\r\n        newColums=  newColums.map(x => {\r\n            if(x.workListId === workListId){\r\n                x.title = title;\r\n            }\r\n            return x;\r\n        })\r\n        setLists(newColums);\r\n    }\r\n\r\n    const onColumnDrop = async (dropResult) => {\r\n        let newColums = [...lists]\r\n        newColums = applyDrag(newColums, dropResult)\r\n        setLists(newColums)\r\n        await updateDisplayOrderWorkList({\r\n            boardId: props.id,\r\n            addedIndex: dropResult.addedIndex,\r\n            removeIndex: dropResult.removedIndex\r\n        });\r\n    }\r\n\r\n    const updateTask = async () => {\r\n        await updateDisplayOrderTask({\r\n            removeId: removeId,\r\n            removedIndex: removedIndex,\r\n            addId: addId,\r\n            addedIndex: addedIndex\r\n        });\r\n    }\r\n    const onCardDrop = (workListId, dropResult) => {\r\n        if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\r\n            let newColums = [...lists]\r\n            let currenColumn = newColums.find(x => x.workListId === workListId)\r\n            currenColumn.tasks = applyDrag(currenColumn.tasks, dropResult)\r\n            setLists(newColums);\r\n            if (dropResult.removedIndex !== null) {\r\n                setRemoveId(workListId);\r\n                setRemovedIndex(dropResult.removedIndex);\r\n            }\r\n            if (dropResult.addedIndex !== null) {\r\n                setAddId(workListId);\r\n                setAddedIndex(dropResult.addedIndex);\r\n\r\n            }\r\n            console.log(dropResult);\r\n        }\r\n    }\r\n    if (addedIndex !== -1 && addId !== -1 && removedIndex !== -1 && removeId !== -1) {\r\n        updateTask();\r\n        setAddId(-1);\r\n        setAddedIndex(-1);\r\n        setRemovedIndex(-1);\r\n        setRemoveId(-1);\r\n    }\r\n    // delete workList\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [listId, setListId] = useState(\"\");\r\n    const showModal = (listId) => {\r\n        setListId(listId);\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleDeleteList = () => {\r\n        deleteList(listId);\r\n        setIsModalVisible(false)\r\n    };\r\n    function deleteList(id) {\r\n        let newColums = [...lists];\r\n        let displayOrder = newColums.find(x => x.workListId === id).displayOrder;\r\n        newColums = newColums.filter(x => x.workListId !== id);\r\n        newColums = newColums.map(x => {\r\n            if (x.displayOrder > displayOrder) {\r\n                x.displayOrder = x.displayOrder - 1;\r\n            }\r\n            return x;\r\n        })\r\n        setLists(newColums);\r\n        deleteWL(id);\r\n\r\n    }\r\n    const deleteWL = async (id) => {\r\n        await deleteWorkList({\r\n            workListId: id\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', background: \"green\", overflow: 'scroll', height: '82vh' }}>\r\n            <Container\r\n                orientation=\"horizontal\"\r\n                onDrop={onColumnDrop}\r\n                getChildPayload={index => lists[index]}\r\n                dropPlaceholder={{\r\n                    animationDuration: 150,\r\n                    showOnTop: true,\r\n                    className: 'cards-drop-preview'\r\n                }}>\r\n                {lists.map((list, index) => (\r\n                    <Draggable key={index}>\r\n                        <div className=\"column\" >\r\n                            <div className=\"title\" >\r\n                                <Title listId={list.workListId} title={list.title} resetTitle={resetTitle}></Title>\r\n                                <Dropdown trigger=\"click\"\r\n                                    overlay={<Button onClick={() => showModal(list.id)}\r\n                                        style={{ border: 'none', padding: '10px', color: '#000', borderRadius: '3px', cursor: 'pointer' }}\r\n                                    >Delete List\r\n                                    </Button>}\r\n                                    placement=\"bottomLeft\" >\r\n                                    <DashOutlined style={{ cursor: 'pointer' }} />\r\n                                </Dropdown>\r\n                            </div>\r\n                            <div className=\"card-list\">\r\n                                <Cards task={list.tasks} workListId={list.workListId} reload={reload} onCardDrop={onCardDrop} />\r\n                            </div>\r\n                        </div>\r\n                    </Draggable>\r\n                ))}\r\n            </Container>\r\n            <Modal title=\"Alert !!!\" visible={isModalVisible} width={400} onOk={handleDeleteList}\r\n                onCancel={handleCancel}>\r\n                <h3>Do you want to delete this list?</h3>\r\n            </Modal>\r\n            <div>\r\n                {open ? (\r\n                    <div className=\"box\">\r\n                        <input className=\"input\" onChange={e => setworkList(e.target.value)} type=\"text\" placeholder=\"Enter a title\"></input>\r\n                        <button className=\"button\" onClick={onSubmit}>Add list</button>\r\n                        <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '20px' }} />\r\n                    </div>\r\n                ) : (\r\n                    <Button className=\"add-new-list\" onClick={() => setOpen(!open)}>\r\n                        <PlusOutlined /> Add New List\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n"]},"metadata":{},"sourceType":"module"}