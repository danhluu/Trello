[{"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\index.js":"1","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\reportWebVitals.js":"2","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\App.js":"3","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\router\\HomeUrl.js":"4","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Home.js":"5","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Board.js":"6","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Login.js":"7","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Register.js":"8","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Header.js":"9","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Header2.js":"10","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\List\\List.js":"11","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\Api\\func\\user.js":"12","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\Api\\helpers.js":"13","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Title\\Title.js":"14","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Card\\Cards.js":"15","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\Api\\url.js":"16","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\utils\\dragDrop.js":"17","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Comment\\Task.js":"18","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\firebase\\firebase-config.js":"19"},{"size":500,"mtime":1626100058724,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1626100058724,"results":"22","hashOfConfig":"21"},{"size":220,"mtime":1627014857292,"results":"23","hashOfConfig":"21"},{"size":800,"mtime":1627616507320,"results":"24","hashOfConfig":"21"},{"size":3522,"mtime":1628786583745,"results":"25","hashOfConfig":"21"},{"size":357,"mtime":1627876141099,"results":"26","hashOfConfig":"21"},{"size":2716,"mtime":1627616963075,"results":"27","hashOfConfig":"21"},{"size":3302,"mtime":1627628899038,"results":"28","hashOfConfig":"21"},{"size":1310,"mtime":1627374617486,"results":"29","hashOfConfig":"21"},{"size":17751,"mtime":1627908975843,"results":"30","hashOfConfig":"21"},{"size":7127,"mtime":1627834270506,"results":"31","hashOfConfig":"21"},{"size":4243,"mtime":1627905701652,"results":"32","hashOfConfig":"21"},{"size":6354,"mtime":1627545851867,"results":"33","hashOfConfig":"21"},{"size":969,"mtime":1627609385221,"results":"34","hashOfConfig":"21"},{"size":3610,"mtime":1627907563603,"results":"35","hashOfConfig":"21"},{"size":1563,"mtime":1628781041096,"results":"36","hashOfConfig":"21"},{"size":455,"mtime":1627377712554,"results":"37","hashOfConfig":"21"},{"size":29879,"mtime":1628785236300,"results":"38","hashOfConfig":"21"},{"size":604,"mtime":1626926946282,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"14kjlvn",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\index.js",[],["86","87"],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\reportWebVitals.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\App.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\router\\HomeUrl.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Home.js",["88","89"],"import React, { useEffect, useState } from 'react';\r\nimport { createBoard, getAllBoard } from '../Api/func/user';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../src/style.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport { Button, Input } from 'antd';\r\nimport { PlusOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\nconst Home = () => {\r\n    const [open, setOpen] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n\r\n    const styleBut = {\r\n        width: 300,height: '40px', background: '#43a643', borderRadius: '5px', color: '#fff', fontWeight: '500', border: 'none', margin: '20px 30px'\r\n    };\r\n    const styleInput = {\r\n        margin: '20px 15px',\r\n        width: 250,\r\n        // border: \"none\",\r\n        height: '40px',\r\n        background: '#fff',\r\n        borderRadius: '4px',\r\n        alignItems: 'center'\r\n    };\r\n    const styleButAdd = {\r\n        width: '120px',height: '40px', background: '#43a643', color: '#fff', fontWeight: 'bold', alignItems: 'center', borderRadius: '4px', border: 'none', marginBottom: '10px'\r\n    }\r\n    const styleBox = {\r\n        // width: '290px', \r\n        border: 'none', \r\n        margin: '0px 0px 0px 20px', \r\n        // background: '#EBECF0', \r\n        borderRadius: '4px',\r\n    }\r\n\r\n    const onSubmit = async () => {\r\n        await createBoard({\r\n            title: title\r\n        });\r\n        getData();\r\n        setOpen(false);\r\n    }\r\n    const getData = async () => {\r\n        const rest = await getAllBoard({\r\n        })\r\n        setItems(rest.data);\r\n        console.log(items);\r\n    }\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n\r\n    const listBoard = items.map((x, index) => (\r\n        <li key={x.boardId} style={{marginLeft:\"20px\"}}>\r\n            <Link to={'/board/' + x.boardId} >\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-4\">\r\n                        <div className=\"card\" style={{ width: '18rem' }}>\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{x.title}</h5>\r\n                                {/* <p className=\"card-text\">{x.createDate}</p> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <ul>\r\n                    {listBoard}\r\n                    <div className=\"container\">\r\n                        {open ? (\r\n                            <div style={styleBox} >\r\n                                <Input id='title' onChange={e => setTitle(e.target.value)} type=\"text\" style={styleInput} placeholder=\"Tiêu đề của bảng\"></Input>\r\n                                <button onClick={onSubmit} style={styleButAdd}>Thêm</button>\r\n                                <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '10px' }} />\r\n                            </div>\r\n                        ) : (\r\n                            <Button onClick={() => setOpen(!open)} style={styleBut}>\r\n                                <PlusOutlined /> Thêm Bảng\r\n                            </Button>\r\n                        )}\r\n                    </div>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Home;","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Board.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Login.js",["90"],"import React, {useState } from 'react';\r\n\r\nimport { loginApi } from '../Api/func/user';\r\nimport '../../src/style.css'\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Login = (props) => {\r\n    let history = useHistory();\r\n\r\n    const [tfEmail, setEmail] = useState(\"\");\r\n    const [tfPassword, setPassword] = useState(\"\");\r\n\r\n\r\n    const onSubmit = async () => {\r\n        const res = await loginApi({\r\n            email: tfEmail,\r\n            password: tfPassword\r\n        });\r\n        if (res.data != null) {\r\n            localStorage.setItem(\"TOKEN\", res.data.jwtToken);\r\n            console.log(res.data);\r\n            history.push(\"/home\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-wrapper\">\r\n            <section className=\"ftco-section\">\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-md-6 col-lg-4\">\r\n                            <div className=\"login-wrap py-5\">\r\n                                <div className=\"align-items-center justify-content-center\" />\r\n                                <p className=\"text-center\">LOGIN SYSTEM</p>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"icon d-flex align-items-center justify-content-center\"><span className=\"fa fa-user\" /></div>\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Username\" onChange={e => setEmail(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"icon d-flex align-items-center justify-content-center\"><span className=\"fa fa-lock\" /></div>\r\n                                    <input type=\"password\" className=\"form-control\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <button onClick={onSubmit} className=\"btn form-control btn-primary rounded submit px-3\">LOGIN</button>\r\n                                </div>\r\n                                <div className=\"w-100 text-center mt-4 text\">\r\n                                    <p className=\"mb-0\">Don't have an account?</p>\r\n                                    <Link to=\"/register\">Sign Up</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Login;","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Register.js",["91"],"import React, { useEffect, useState } from 'react';\r\nimport { registerApi } from '../Api/func/user';\r\nimport '../../src/style.css'\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nconst Register = (props) => {\r\n\r\n    const [tfEmail, setEmail] = useState(\"\");\r\n    const [tfPassword, setPassword] = useState(\"\");\r\n    const [rePassword, setRePassword] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const onSubmit = async () => {\r\n        const res = await registerApi({\r\n            email: tfEmail,\r\n            password: tfPassword,\r\n            rePassword: rePassword\r\n        });\r\n        if (res.data != null) {\r\n            console.log(\"Success\");\r\n            setRedirect(true)\r\n        }\r\n        else {\r\n            alert(\"Trùng tên tài khoản\")\r\n        }\r\n\r\n    }\r\n\r\n    if (redirect) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-wrapper\">\r\n            <section className=\"ftco-section\">\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-md-6 col-lg-4\">\r\n                            <div className=\"login-wrap py-5\">\r\n                                <div className=\"align-items-center justify-content-center\" />\r\n                                <p className=\"text-center\">REGISTER</p>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"icon d-flex align-items-center justify-content-center\"><span className=\"fa fa-user\" /></div>\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Username\" onChange={e => setEmail(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"icon d-flex align-items-center justify-content-center\"><span className=\"fa fa-lock\" /></div>\r\n                                    <input type=\"password\" className=\"form-control\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"icon d-flex align-items-center justify-content-center\"><span className=\"fa fa-lock\" /></div>\r\n                                    <input type=\"password\" className=\"form-control\" placeholder=\"RePassword\" onChange={e => setRePassword(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <button onClick={onSubmit} className=\"btn form-control btn-primary rounded submit px-3\">Register</button>\r\n                                </div>\r\n                                <div className=\"w-100 text-center mt-4 text\">\r\n                                    <p className=\"mb-0\">Have an account?</p>\r\n                                    <Link to=\"/\">Login</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Register;","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Header.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Header2.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import React, { useEffect, useState,useRef } from 'react';\r\nimport { StarOutlined, LockOutlined , PlusOutlined} from '@ant-design/icons';\r\nimport {Button, Layout, Select, Avatar,Input ,Modal} from 'antd';\r\n// import api from './callApi/baseUrl'\r\nimport Form from 'antd/lib/form/Form';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './header2.css'\r\nimport { deleteUserToBoardApi, getAllUserBoard, getAllUserToAddToBoard, postUserToBoardApi,testApi } from '../Api/func/user';\r\n\r\nfunction Header2(id) {\r\n    const styleHead2 = {\r\n        position:\"relative\",\r\n        background: '#6D8DDF',\r\n        height: '60px',\r\n        marginTop: '6px',\r\n        padding: '0px'\r\n    };\r\n    const styleButton = {\r\n        margin:'auto 5px',\r\n        background: '#B9CFFB',\r\n        color:'#fff', \r\n        fontWeight:'bold', \r\n        height:'40px',\r\n        border: 'none',\r\n    };\r\n    const styleAvatar = {\r\n        width:\"40px\",\r\n        height:\"40px\",\r\n        color: '#000',\r\n        textAlign:\"center\",\r\n        backgroundColor: '#fff',\r\n        fontSize: '12px',\r\n        fontWeight: '500',\r\n        // margin: 'auto 1px auto 0',\r\n        borderRadius: '50%'\r\n    };\r\n\r\n    const invite_popup = {\r\n        width: \"300px\",\r\n        height: \"400px\",\r\n        position: 'absolute',\r\n        top: '33px',\r\n        left: '4px',\r\n        backgroundColor: '#ffffff',\r\n        border: 'solid 1px #e7eaf0',\r\n        borderRadius: '5px',\r\n        zIndex: '1'\r\n    }\r\n\r\n    //state\r\n    const [userSearch, setuserSearch] = useState([]);\r\n    const [userAdded, setuserAdded] = useState([]);\r\n    const [email, setemail] = useState(\"\");\r\n    const [error, seterror] = useState(\"1\");\r\n    const [users, setusers] = useState([]);//danh sach nguoi trong bang\r\n    const [userDetail, setuserDetail] = useState({})\r\n    const [userInfor, setuserInfor] = useState({})\r\n        //modal\r\n    const [isModalUserDetail, setisModalUserDetail] = useState(false);\r\n\r\n    //ref\r\n    const textInput = useRef(null);\r\n\r\n\r\n    //ẩn hiện form thêm người dùng vào bảng\r\n    const btnInviteOnclick = ()=>{\r\n        var x = document.getElementById(\"invitePopup\");\r\n        document.getElementById(\"focus\").focus();\r\n        x.classList.toggle(\"isHide\");\r\n        const userDetail = document.getElementById(\"detail-user\");\r\n        userDetail.classList.add(\"isHide\");\r\n        setuserSearch([]);\r\n        setuserAdded([]);\r\n        seterror(\"1\");\r\n        textInput.current.focus();\r\n        // setemail(\"\");\r\n    }\r\n\r\n    //đóng invite\r\n    const btnCloseInviteOnClick = ()=>{\r\n        var x = document.getElementById(\"invitePopup\");\r\n        x.classList.add(\"isHide\");\r\n    }\r\n\r\n    //change email\r\n    const EmailOnChange = (e) =>{\r\n        if(e.target.value){\r\n            setemail(e.target.value);\r\n        }\r\n    }\r\n\r\n\r\n    //Đóng popup danh sách người dùng trong bảng\r\n    const handleCancelDead = () => {\r\n        setisModalUserDetail(false)\r\n    };\r\n\r\n    //Đóng popup danh sách người dùng trong bảng - X\r\n    const btnCloseListUser = ()=>{\r\n        const dom = document.getElementById(\"popup-list-users\");\r\n        dom.classList.add(\"isHide\");\r\n    }\r\n\r\n    //Tìm Kiếm người dùng\r\n    const btnSearchOnClick = async (e)=>{\r\n        try{\r\n            var users = await getAllUserToAddToBoard({\r\n                boardId: id.id,\r\n                keyword: email\r\n            });\r\n            \r\n            console.log(users.data);\r\n            if(users.data.length>0){\r\n                setuserSearch(users.data);\r\n                seterror(\"1\");\r\n            }\r\n            else {\r\n                seterror(\"2\");\r\n                setuserSearch([]);\r\n            }\r\n        }catch(ex){\r\n            console.log(ex);\r\n            seterror(\"Không tìm thấy kết quả\");\r\n            setuserSearch([]);\r\n        }\r\n    }\r\n\r\n    //Thêm vào danh sách add\r\n    const addToListInvite = (e) =>{\r\n        // console.log(\"obj invite: \",e)\r\n        if(!userAdded.includes(e)){\r\n            setuserAdded([...userAdded,e]);\r\n        }\r\n        // console.log(userAdded);\r\n    }\r\n\r\n    //Xoá khỏi danh sách mời vào bảng\r\n    const removeToListInvite = (obj) =>{\r\n        console.log(\"obj Remove: \",obj)\r\n        var arr = userAdded;\r\n        console.log(\"arr: \",arr)\r\n        for(let i =0;i<arr.length;i++){\r\n            if(obj.id==arr[i].id){\r\n                arr.splice(i,1);\r\n                // console.log(arr[i]);\r\n                \r\n            }\r\n        }\r\n        console.log(\"Sau khi remove: \",userAdded)\r\n        setuserAdded([...arr]);\r\n        \r\n    }\r\n\r\n    //thêm người vào bảng\r\n    const btnAddUserOnClick = async (e)=>{\r\n        if(userAdded.length>0){\r\n            for(let i = 0;i<userAdded.length;i++){\r\n                var u_id = userAdded[i].id;\r\n                var b_id=id.id;\r\n                var user_b = {\r\n                    userId: u_id,\r\n                    // boardId: b_id,\r\n                    fullName:userAdded[i].fullName,\r\n                    email:userAdded[i].email\r\n                }\r\n                // console.log(user_b)\r\n                await postUserToBoardApi({\r\n                    userId: u_id,\r\n                    boardId: b_id\r\n                }).then(res=>{\r\n                    console.log(\"res: \",res);\r\n                    setusers([...users,user_b])\r\n                });\r\n                // api.post(\"user_b\",user_b).then(res =>{\r\n                //     console.log(\"res: \",res);\r\n                // }).catch(e =>{\r\n                //     console.log(\"ex: \",e)\r\n                // });\r\n            }\r\n            btnCloseInviteOnClick();\r\n        }\r\n    }\r\n\r\n    //Hien thi danh sach nguoi dung\r\n    const showModelDetailUser = ()=>{\r\n        //An Hien danh sach\r\n        const dom = document.getElementById(\"popup-list-users\");\r\n        dom.classList.toggle(\"isHide\");\r\n\r\n        //an chi tiet\r\n        const domDetail = document.getElementById(\"detail-user\");\r\n        domDetail.classList.add(\"isHide\");\r\n    }\r\n\r\n    const { Header} = Layout;\r\n    const { Option } = Select;\r\n\r\n    \r\n    // Get all user\r\n    const getAllUsers = async ()=>{\r\n        const users = await getAllUserBoard({\r\n            boardId:id.id\r\n        });\r\n        return users;\r\n        // const res = await api.get('/user_board');\r\n        // return res;\r\n    }\r\n\r\n    // Chi tiết user\r\n    const DetailUser = (obj)=>{\r\n        //an danh sach\r\n        const domList = document.getElementById(\"popup-list-users\");\r\n        domList.classList.add(\"isHide\");\r\n        //hien thi chi tiet\r\n        const dom = document.getElementById(\"detail-user\");\r\n        dom.classList.toggle(\"isHide\");\r\n        //an invite\r\n        const invite = document.getElementById(\"invitePopup\");\r\n        invite.classList.add(\"isHide\")\r\n        console.log(obj)\r\n\r\n        setuserDetail(obj);\r\n    }\r\n\r\n    \r\n\r\n    //Đóng chi tiết người dùng\r\n    const btnCloseOnClick = ()=>{\r\n        const dom = document.getElementById(\"detail-user\");\r\n        dom.classList.add(\"isHide\");\r\n    }\r\n\r\n    //Xử lý Rời khỏi bảng\r\n    const btnLeaveUserOnClick = async()=>{\r\n        console.log(\"Chi tiết ngừi dùng rời khỏi bảng: \",userDetail)\r\n        var arr = users;\r\n        await deleteUserToBoardApi({\r\n            userId:userDetail.id,\r\n            boardId: id.id\r\n        }).then(async()=>{\r\n            const allUsers = await getAllUsers();\r\n            if(allUsers){\r\n                const dom = document.getElementById(\"detail-user\");\r\n                dom.classList.add(\"isHide\");\r\n                setusers(allUsers.data);\r\n            }\r\n                \r\n        });\r\n    }\r\n\r\n    // useEffect\r\n    useEffect(async ()=>{\r\n        const getAll = async () =>{\r\n            const allUsers = await getAllUsers();\r\n            console.log(\"user: \",allUsers);\r\n            if(allUsers)\r\n                setusers(allUsers.data);\r\n        }\r\n        console.log(id.id)\r\n        // const timer = setInterval(1000)\r\n        getAll();\r\n        // return () => clearInterval(timer);\r\n    }, []);\r\n\r\n    // if(users[0])\r\n    //     console.log(users[0].username.charAt(0));\r\n\r\n\r\n    return (\r\n        <Header style={styleHead2}>\r\n            <div style={{margin:'auto 20px', display:'flex', justifyContent:'space-between'}}>\r\n                    <div>\r\n                        <Select defaultValue=\"Board\" style={{ width: 110, margin:'auto 5px auto 0', color:'#000', fontWeight:'500'}} >\r\n                            <Option value=\"Board\">Board</Option>\r\n                            <Option value=\"Calendar\">Calendar</Option>               \r\n                        </Select>\r\n                        <Button style={styleButton}>Name</Button>\r\n                        <Button style={styleButton}><StarOutlined /></Button>\r\n                        <Button style={styleButton}><LockOutlined /> Private</Button>\r\n                        {\r\n                            users.map((user, index)=>{\r\n                                return (index<2)?\r\n                                    <Button onClick={()=>DetailUser(user)} key={user.id} style={styleAvatar}>{(user.fullName)?user.fullName.charAt(0):\"\"}</Button>\r\n                                    :\"\";\r\n                                \r\n                            })\r\n                        }\r\n\r\n                        {/* Chi tiết người dùng */}\r\n                        <div id=\"detail-user\" className=\"isHide\">\r\n                            <button onClick={btnCloseOnClick} className=\"btnClose\">X</button>\r\n                            <div  className=\"flex detail-user__header\">\r\n                                <div className=\"header__avatar\">\r\n                                    <Avatar className=\"circle_avatar\">{(userDetail.fullName)?userDetail.fullName.charAt(0).toUpperCase():\"\"}</Avatar>\r\n                                </div>\r\n\r\n                                <div className=\"infor-user\">\r\n                                    <div className=\"infor-user_name\">{userDetail.fullName}</div>\r\n                                    <div className=\"infor-user_email\">{userDetail.email}</div>\r\n                                </div>\r\n                            </div>\r\n                            {/* 3 chúc năng */}\r\n                            <div className=\"btn-option-user\">\r\n                                <Button className=\"btn\">Thay Đổi quyền</Button>\r\n                            </div>\r\n                            <div className=\"btn-option-user\">\r\n                                <Button className=\"btn\">Xem hoạt đông của thành viên trong bảng</Button>\r\n                            </div>\r\n                            <div className=\"btn-option-user\">\r\n                                <Button onClick={btnLeaveUserOnClick} className=\"btn\">Rời khỏi bảng</Button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        \r\n                        <Button onClick={showModelDetailUser} style={styleAvatar} className=\"btn-plus-user\">\r\n                            <PlusOutlined/>{((users.length-2)>0)?(users.length-2):\"\"} \r\n                        </Button>\r\n                        <div id=\"popup-list-users\" className=\"popup-list-users isHide\">\r\n                            <button onClick={btnCloseListUser} className=\"btnCloseListUser\">X</button>\r\n                            <div style={{margin:\"10px 0 0 20px\",lineHeight:\"20px\"}} >Danh sách người dùng</div>\r\n                            <hr style={{width:\"90%\", margin:\"10px 0 0 10px\"}} />\r\n                            {\r\n                                users.map((user, index)=>(\r\n                                    <Button onClick={()=>DetailUser(user)} key={user.id} style={styleAvatar}>\r\n                                        {(user.fullName)?user.fullName.charAt(0):\"\"}\r\n                                    </Button>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                        {/* Button Invite */}\r\n                        <span style={{position:\"relative\"}}>\r\n                            <Button onClick={btnInviteOnclick}  style={styleButton}>\r\n                                Invite\r\n                            </Button>\r\n                            <div id=\"invitePopup\" style={invite_popup} className=\"isHide\">\r\n                                <button onClick={btnCloseInviteOnClick} className=\"btnClose\" style={{lineHeight:\"normal\"}}>X</button>\r\n                                <div style={{height:\"20px\",textAlign:\"center\",lineHeight:\"20px\",marginTop:\"5px\", alignItems:\"center\"}}>\r\n                                    Mời vào bảng\r\n                                </div>\r\n                                <hr style={{width:\"90%\", margin:\"10px 0 0 10px\"}}/>\r\n                                <div>\r\n                                   <input id=\"focus\" ref={textInput} onChange={EmailOnChange} style={{height:\"32px\", marginLeft:\"13px\"}} type=\"text\" placeholder=\"Địa chỉ email hoặc tên\"/>\r\n                                   <Button style={{marginLeft:\"10px\"}} onClick={btnSearchOnClick}>Tìm Kiếm</Button>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <ul style={{listStyleType:\"none\",margin:\"0 0 0 20px\",padding:\"0\"}}>\r\n                                    {\r\n                                        userSearch.map((obj,index)=>(\r\n                                            <li key={obj.id} style={{height:\"25px\", marginTop:\"5px\"}}>\r\n                                                <Button \r\n                                                    style={{\r\n                                                        position:\"fixed\",\r\n                                                        height:\"25px\",\r\n                                                        lineHeight:\"18px\",\r\n                                                        border:\"none\", \r\n                                                        borderRadius:\"10px\", \r\n                                                        backgroundColor:\"#6d8ddf\", \r\n                                                        color:\"#fff\"\r\n                                                    }}\r\n                                                    onClick={()=>addToListInvite(obj)}\r\n                                                >\r\n                                                    {obj.email}\r\n                                                </Button>\r\n                                            </li>\r\n                                        ))\r\n                                    }\r\n                                    </ul>\r\n                                </div>\r\n                                \r\n                                \r\n\r\n                                <div style={{textAlign:\"center\",fontSize:\"16px\"}}>{(error!=\"1\")? \"Không tìm thấy\":\"\" }</div>\r\n                                <hr style={{width:\"90%\", margin:\"10px 0 0 10px\"}}/>\r\n                                \r\n                                <div>\r\n                                    <ul style={{listStyleType:\"none\",margin:\"0 0 0 20px\",padding:\"0\"}}>\r\n                                        {\r\n                                            userAdded.map((obj,index)=>(\r\n                                                <li key={obj.id} style={{height:\"25px\", marginTop:\"5px\"}}>\r\n                                                    <Button \r\n                                                        style={{\r\n                                                            position:\"fixed\",\r\n                                                            height:\"25px\",\r\n                                                            lineHeight:\"18px\",\r\n                                                            border:\"none\", \r\n                                                            borderRadius:\"10px\", \r\n                                                            backgroundColor:\"#b9cffb\", \r\n                                                            color:\"#fff\"\r\n                                                        }}\r\n                                                        onClick={()=>removeToListInvite(obj)}\r\n                                                    >\r\n                                                        {obj.email}\r\n                                                    </Button>\r\n                                                </li>\r\n                                            ))\r\n                                        }\r\n                                    </ul>\r\n                                </div>\r\n\r\n                                <div style={{position:\"absolute\", bottom:\"10px\", left:\"25px\"}}>\r\n                                    <Button onClick={btnAddUserOnClick} \r\n                                        className=\"btnAddUser\" \r\n                                        style={{width:\"250px\",backgroundColor:\"#0079bf\", color:\"#fff\"}} \r\n                                        disabled={(userAdded.length==0)}\r\n                                    >\r\n                                        THÊM VÀO BẢNG\r\n                                    </Button>\r\n                                </div>\r\n                                \r\n\r\n                            </div>\r\n                            \r\n                        </span>\r\n                        \r\n                        {/* <span>Truyền board ID vào header2: {id.id}</span> */}\r\n                    </div>       \r\n                    <div>\r\n                        <Button style={styleButton}>Menu</Button>\r\n                    </div>\r\n            </div>\r\n            \r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default Header2\r\n","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\List\\List.js",["108"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Button, Dropdown, Modal } from 'antd';\r\nimport { createWorkList, getAllWorkList, updateDisplayOrderTask, updateDisplayOrderWorkList, deleteWorkList } from '../../Api/func/user';\r\nimport { PlusOutlined, CloseOutlined, DashOutlined } from '@ant-design/icons';\r\nimport Cards from '../Card/Cards';\r\nimport { Container, Draggable } from 'react-smooth-dnd';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Title from '../Title/Title';\r\nimport './list.css';\r\nimport { applyDrag } from '../../utils/dragDrop';\r\n\r\nfunction List(props) {\r\n    const [lists, setLists] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [workList, setworkList] = useState();\r\n\r\n    const [addId, setAddId] = useState(-1);\r\n    const [removeId, setRemoveId] = useState(-1);\r\n    const [addedIndex, setAddedIndex] = useState(-1);\r\n    const [removedIndex, setRemovedIndex] = useState(-1);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        reload();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData])\r\n\r\n    const onSubmit = async () => {\r\n        await createWorkList({\r\n            boardId: props.id,\r\n            title: workList\r\n        });\r\n        reload();\r\n        setOpen(false);\r\n    }\r\n    const reload = async () => {\r\n        const res = await getAllWorkList({\r\n            boardId: props.id\r\n        });\r\n        if (res.data != null) {\r\n            setLists(res.data);\r\n        }\r\n    }\r\n\r\n    const resetTitle = (workListId, title) =>{\r\n        let newColums = [...lists]\r\n        newColums=  newColums.map(x => {\r\n            if(x.workListId === workListId){\r\n                x.title = title;\r\n            }\r\n            return x;\r\n        })\r\n        setLists(newColums);\r\n    }\r\n\r\n    const onColumnDrop = async (dropResult) => {\r\n        let newColums = [...lists]\r\n        newColums = applyDrag(newColums, dropResult)\r\n        setLists(newColums)\r\n        await updateDisplayOrderWorkList({\r\n            boardId: props.id,\r\n            addedIndex: dropResult.addedIndex,\r\n            removeIndex: dropResult.removedIndex\r\n        });\r\n    }\r\n\r\n    const updateTask = async () => {\r\n        await updateDisplayOrderTask({\r\n            removeId: removeId,\r\n            removedIndex: removedIndex,\r\n            addId: addId,\r\n            addedIndex: addedIndex\r\n        });\r\n    }\r\n    const onCardDrop = (workListId, dropResult) => {\r\n        if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\r\n            let newColums = [...lists]\r\n            let currenColumn = newColums.find(x => x.workListId === workListId)\r\n            currenColumn.tasks = applyDrag(currenColumn.tasks, dropResult)\r\n            setLists(newColums);\r\n            if (dropResult.removedIndex !== null) {\r\n                setRemoveId(workListId);\r\n                setRemovedIndex(dropResult.removedIndex);\r\n            }\r\n            if (dropResult.addedIndex !== null) {\r\n                setAddId(workListId);\r\n                setAddedIndex(dropResult.addedIndex);\r\n\r\n            }\r\n            console.log(dropResult);\r\n        }\r\n    }\r\n    if (addedIndex !== -1 && addId !== -1 && removedIndex !== -1 && removeId !== -1) {\r\n        updateTask();\r\n        setAddId(-1);\r\n        setAddedIndex(-1);\r\n        setRemovedIndex(-1);\r\n        setRemoveId(-1);\r\n    }\r\n    // delete workList\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [listId, setListId] = useState(\"\");\r\n    const showModal = (listId) => {\r\n        setListId(listId);\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleDeleteList = () => {\r\n        deleteList(listId);\r\n        setIsModalVisible(false)\r\n    };\r\n    function deleteList(id) {\r\n        let newColums = [...lists];\r\n        let displayOrder = newColums.find(x => x.workListId === id).displayOrder;\r\n        newColums = newColums.filter(x => x.workListId !== id);\r\n        newColums = newColums.map(x => {\r\n            if (x.displayOrder > displayOrder) {\r\n                x.displayOrder = x.displayOrder - 1;\r\n            }\r\n            return x;\r\n        })\r\n        setLists(newColums);\r\n        deleteWL(id);\r\n\r\n    }\r\n    const deleteWL = async (id) => {\r\n        await deleteWorkList({\r\n            workListId: id\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', background: \"green\", overflow: 'scroll', height: '82vh' }}>\r\n            <Container\r\n                orientation=\"horizontal\"\r\n                onDrop={onColumnDrop}\r\n                getChildPayload={index => lists[index]}\r\n                dropPlaceholder={{\r\n                    animationDuration: 150,\r\n                    showOnTop: true,\r\n                    className: 'cards-drop-preview'\r\n                }}>\r\n                {lists.map((list, index) => (\r\n                    <Draggable key={index}>\r\n                        <div className=\"column\" >\r\n                            <div className=\"title\" >\r\n                                <Title listId={list.workListId} title={list.title} resetTitle={resetTitle}></Title>\r\n                                <Dropdown trigger=\"click\"\r\n                                    overlay={<Button onClick={() => showModal(list.id)}\r\n                                        style={{ border: 'none', padding: '10px', color: '#000', borderRadius: '3px', cursor: 'pointer' }}\r\n                                    >Delete List\r\n                                    </Button>}\r\n                                    placement=\"bottomLeft\" >\r\n                                    <DashOutlined style={{ cursor: 'pointer' }} />\r\n                                </Dropdown>\r\n                            </div>\r\n                            <div className=\"card-list\">\r\n                                <Cards task={list.tasks} workListId={list.workListId} reload={reload} onCardDrop={onCardDrop} />\r\n                            </div>\r\n                        </div>\r\n                    </Draggable>\r\n                ))}\r\n            </Container>\r\n            <Modal title=\"Alert !!!\" visible={isModalVisible} width={400} onOk={handleDeleteList}\r\n                onCancel={handleCancel}>\r\n                <h3>Do you want to delete this list?</h3>\r\n            </Modal>\r\n            <div>\r\n                {open ? (\r\n                    <div className=\"box\">\r\n                        <input className=\"input\" onChange={e => setworkList(e.target.value)} type=\"text\" placeholder=\"Enter a title\"></input>\r\n                        <button className=\"button\" onClick={onSubmit}>Add list</button>\r\n                        <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '20px' }} />\r\n                    </div>\r\n                ) : (\r\n                    <Button className=\"add-new-list\" onClick={() => setOpen(!open)}>\r\n                        <PlusOutlined /> Add New List\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\Api\\func\\user.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\Api\\helpers.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Title\\Title.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Card\\Cards.js",["109"],"import React, { useState } from 'react';\r\nimport { PlusOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport { Modal, Typography } from 'antd';\r\nimport { createTask, testApi } from '../../Api/func/user';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Draggable } from 'react-smooth-dnd';\r\nimport './Card.css';\r\nimport 'antd/dist/antd.css'\r\nimport Task from '../Comment/Task'\r\nimport { useEffect } from 'react';\r\n\r\n\r\nfunction Cards(props) {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [workTask, setWorkTask] = useState(\"\");\r\n    const [task, settask] = useState(\"\");\r\n    const [user, setuser] = useState({});\r\n\r\n    const {onCardDrop} = props;\r\n    const showModal = (card) => {\r\n        settask(card);\r\n        setIsModalVisible(true);\r\n        // console.log(card);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const onSubmit = async () => {\r\n        await createTask({\r\n            workListId: props.workListId,\r\n            title: workTask\r\n        });\r\n        \r\n        setOpen(false);\r\n        props.reload();\r\n    }\r\n    const getUserInfor = async ()=>{\r\n        const rest=await testApi({\r\n        });\r\n        return rest.data;\r\n    }\r\n    useEffect(() => {\r\n        const getAll = async ()=>{\r\n            //user\r\n            const user = await getUserInfor();\r\n            if(user) {\r\n                console.log(\"Thong tin nguoi dung:\",user);\r\n                setuser(user);\r\n            }\r\n        }\r\n        getAll();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Container\r\n                groupName=\"col\"\r\n                onDrop={dropResult => onCardDrop(props.workListId, dropResult)}\r\n                getChildPayload={index => props.task[index]\r\n                }\r\n                dragClass=\"card-ghost\"\r\n                dropClass=\"card-ghost-drop\"\r\n\r\n                dropPlaceholder={{\r\n                    animationDuration: 150,\r\n                    showOnTop: true,\r\n                    className: 'drop-preview'\r\n                }}\r\n                dropPlaceholderAnimationDuration={200}>\r\n                {props.task.map((card, index) => (\r\n                    <Draggable key={index}>\r\n                        <div className=\"card-item\" key={index}>\r\n                            <button className=\"typography btn-card\" onClick={()=>showModal(card)}>{card.title}</button>\r\n                        </div>\r\n                    </Draggable>\r\n                ))\r\n                }\r\n            </Container>\r\n            <div className=\"workList\">\r\n                {open ? (\r\n                    <div>\r\n                        <input onChange={e => setWorkTask(e.target.value)} type=\"text\" required className=\"input\" placeholder=\"Enter a title\"></input>\r\n                        <button type=\"button\" className=\"button\" onClick={onSubmit} >Add task</button>\r\n                        <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '80px', fontSize: '20px' }} />\r\n                    </div>\r\n                ) : (\r\n                    <button onClick={() => setOpen(!open)} className=\"add-task\" > <PlusOutlined /> Add task</button>\r\n                )}\r\n            </div>\r\n            <Modal width={1000} centered title=\"\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Task obj={task} user={user} />\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\Api\\url.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\utils\\dragDrop.js",[],"E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\pages\\Comment\\Task.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport './task.css';\r\nimport { \r\n    PlusOutlined\r\n    ,HomeOutlined,\r\n    MenuOutlined,\r\n    MessageOutlined,\r\n    SmileOutlined,\r\n    UserAddOutlined,\r\n    FieldTimeOutlined,\r\n    PictureOutlined,\r\n    DownOutlined // Quang\r\n    } from '@ant-design/icons';\r\n    import {\r\n        Button,\r\n        Modal,\r\n        Typography,\r\n        Avatar,\r\n        Form,\r\n        Checkbox,\r\n        Dropdown,\r\n        DatePicker\r\n      } from \"antd\"; // Quang\r\nimport moment from 'moment';\r\n// import api from './callApi/baseUrl';\r\nimport {v4 as uuidv4} from 'uuid'\r\nimport { storage } from '../../firebase/firebase-config';\r\nimport { deleteDeadlineApi, deleteUserToTaskApi, getAllUserInTask, getComments,getDeadlineByTaskIdApi,getUsersToAddToTask,postCommentApi, postDeadlineToTaskApi, postUserToTaskApi, testApi, updateDeadlineApi, updateImageTask } from '../../Api/func/user';\r\nimport { logDOM } from '@testing-library/react';\r\n\r\nfunction Task(props) {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);      \r\n\r\n    const showModal = async () => {\r\n        setIsModalVisible(true);\r\n        console.log(userTask)\r\n    };\r\n    // const handleOk = () => {\r\n    //     setIsModalVisible(false);\r\n    // };\r\n    \r\n    const handleCancel = () => {\r\n        const dom = document.getElementById(\"modal-member\");\r\n        dom.classList.add(\"isHide\")\r\n        const domImage = document.getElementById(\"modal-picture\");\r\n        domImage.classList.add(\"isHide\")\r\n        setIsModalVisible(false);\r\n        \r\n    };\r\n\r\n    /**\r\n     * Quang Bổ sung phần deadline\r\n     */\r\n    // new\r\n    // deadline\r\n    const [startDate, setStartDate] = useState(\"01/01/1900\");\r\n    const [endDate, setEndDate] = useState(\"01/01/1900\");\r\n    const [done, setDone] = useState(false);\r\n    const [colorDone, setColorDone] = useState(\"\");\r\n    const [openDeadline, setOpenDeadline] = useState(false);\r\n    const [isModalDeadVisible, setIsModalDeadVisible] = useState(false);\r\n    const [deadlineDetail, setdeadlineDetail] = useState({})\r\n    const [imageModal, setImageModal] = useState(false)\r\n    const [usersModal, setUsersModal] = useState(false)\r\n\r\n    //Hien thi o nhap deadline\r\n    const showModalDead = async () => {\r\n        console.log(done);\r\n        setIsModalDeadVisible(true);\r\n    };\r\n    const handleCancelDead = () => {\r\n        setIsModalDeadVisible(false);\r\n    };\r\n\r\n    \r\n\r\n    const handleSaveDeadline = async () => {\r\n        console.log(startDate);\r\n        console.log(endDate);\r\n        const dl = await getDeadlineByTaskIdApi({taskId:props.obj.taskId});\r\n        if(!dl.data){\r\n            await postDeadlineToTaskApi({\r\n                taskId:props.obj.taskId,\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                complete: false\r\n            }).then(res =>{\r\n                console.log(res.data);\r\n                setdeadlineDetail(res.data);\r\n            }).catch(e=>{\r\n                console.log(\"Loi: \",e);\r\n            });\r\n            console.log(\"Chua co dealine -> Thêm\")\r\n        }else{\r\n            await updateDeadlineApi({\r\n                deadlineId: deadlineDetail.deadlineId,\r\n                startDate:startDate,\r\n                endDate:endDate,\r\n                complete:!done\r\n            }).then(res=>{\r\n                console.log(\"sau khi update:\",res.data )\r\n                setdeadlineDetail(res.data)\r\n            });\r\n            // setStartDate(dl.data.startDate);\r\n            // setEndDate(dl.data.endDate)\r\n            setOpenDeadline(true);\r\n        }\r\n\r\n        setOpenDeadline(true);\r\n        setIsModalDeadVisible(false);\r\n    };\r\n    const handleDeleteDeadline = async() => {\r\n        await deleteDeadlineApi({\r\n            deadlineId: deadlineDetail.deadlineId\r\n        });\r\n        setOpenDeadline(false);\r\n    };\r\n    function getDateValue(dates, dateStrings) {\r\n        setStartDate(dateStrings[0]);\r\n        setEndDate(dateStrings[1]);\r\n    }\r\n    const onChangeCheckColor = async () => {\r\n        setDone(!done);\r\n        {\r\n        done ? setColorDone(\"#61bd4f\") : setColorDone(\"#EBECF0\");\r\n        }\r\n        await updateDeadlineApi({\r\n            deadlineId: deadlineDetail.deadlineId,\r\n            startDate:deadlineDetail.startDate,\r\n            endDate:deadlineDetail.endDate,\r\n            complete:!done\r\n        });\r\n    };\r\n    const { RangePicker } = DatePicker;\r\n\r\n    const dateFormat = 'DD/MM/YYYY';\r\n\r\n\r\n    //NDL\r\n    const styleTask = {\r\n        padding: '5px 10px',\r\n        background: '#fff',\r\n        marginBottom: '10px',\r\n        borderRadius: '5px',\r\n        fontWeight: '500',\r\n        textAlign: 'left',\r\n        cursor: 'pointer'\r\n    };\r\n    const solves = () => {\r\n        alert(\"Xử lý\");\r\n    }\r\n\r\n    //state\r\n    const [comments, setcomments] = useState([]);\r\n    const [contentCmt, setcontentCmt] = useState(\"\");\r\n    const [userTask, setuserTask] = useState([]);\r\n    const [userNoTask, setuserNoTask] = useState([]);\r\n    const [image, setimage] = useState(props.obj.image);\r\n\r\n    //onchange\r\n    const commentOnChange = (e)=>{\r\n        if(e.target.value){\r\n            setcontentCmt(e.target.value);\r\n        }\r\n    }\r\n\r\n    //get data\r\n    //get all comment\r\n    const getAllComment = async ()=>{\r\n        const cmt = await getComments({\r\n            taskId: props.obj.taskId\r\n        });\r\n        console.log(\"list cmt: \",cmt.data)\r\n        return cmt.data;\r\n    }\r\n    //Lấy tất cả user được giao việc trong task\r\n    const getAllUserTask = async ()=>{\r\n        const ut = await getAllUserInTask({taskId: props.obj.taskId})\r\n        console.log(ut)\r\n        // const ut = await api.get(\"user_task\");\r\n        return ut.data;\r\n    }\r\n    //Lấy tât cả user trong bảng mà ko thuộc task\r\n    const getAllUserNoTask = async()=>{\r\n        const unt = await getUsersToAddToTask({taskId: props.obj.taskId});\r\n        // const unt = await api.get(\"user_no_task\");\r\n        return unt.data;\r\n    }\r\n\r\n    //Chi tiết người dùng trong task\r\n    const detailUserTask = async (obj) =>{\r\n        console.log(\"Chi tiết thằng bị đá khỏi task: \",obj);\r\n        console.log(\"ID task: \",props.obj.taskId);\r\n        await deleteUserToTaskApi({\r\n            userId:obj.id,\r\n            taskId:props.obj.taskId\r\n        }).then(async(res)=>{\r\n            const allUserTask = await getAllUserTask();\r\n            if(allUserTask) \r\n                setuserTask(allUserTask);\r\n            const userNotask = await getAllUserNoTask();\r\n            if(userNotask) \r\n                setuserNoTask(userNotask)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 3 chức năng trong task\r\n     * Thêm Thành viên, Deadline, ảnh bìa\r\n     */\r\n\r\n    //Click nut them thanh vien\r\n    //Hien thi Modal them thanh vien vao task\r\n    const showModalUsers = async () => {\r\n        const x = await getAllUserNoTask();\r\n        setuserNoTask(x);\r\n        setUsersModal(true);\r\n    };\r\n    const handleCancelModalUsers= () => {\r\n        setUsersModal(false);\r\n    };\r\n\r\n    //hover vào 1 thành viên => hiện tên thành viên đó\r\n    // const hoverName = (obj)=>{\r\n    //     var x = \"mouseOver-\"+obj;\r\n    //     document.getElementById(x).classList.remove(\"isHide\")\r\n    // }\r\n    // const hoverNameOut = (obj)=>{\r\n    //     var x = \"mouseOver-\"+obj;\r\n    //     document.getElementById(x).classList.add(\"isHide\")\r\n    // }\r\n\r\n    //Click nut them thanh vien (Dau cong)\r\n    // const btnAddMemberOnClick = async ()=>{\r\n    //     const dom = document.getElementById(\"modal-member\");\r\n    //     dom.classList.toggle(\"isHide\")\r\n    //     const x = await getAllUserNoTask();\r\n    //     setuserNoTask(x);\r\n    // }\r\n    // const btnCloseOnClick = ()=>{\r\n    //     const dom = document.getElementById(\"modal-member\");\r\n    //     dom.classList.add(\"isHide\")\r\n    // }\r\n    //Click vào thành viên để thêm thành viên vào táks\r\n    const btnAddMemberTask = async (obj)=>{\r\n        const arr = userNoTask;\r\n        console.log(\"arr: \",arr)\r\n        for(let i =0;i<arr.length;i++){\r\n            if(obj.id==arr[i].id){\r\n                arr.splice(i,1);\r\n                // console.log(arr[i]);\r\n                \r\n            }\r\n        }\r\n        await postUserToTaskApi({\r\n            userId: obj.id,\r\n            taskId: props.obj.taskId\r\n        });\r\n        setuserTask([...userTask,obj])\r\n        setuserNoTask([...arr]);\r\n    }\r\n    //ảnh bìa - mở\r\n    // const chooseImage = () =>{\r\n    //     const dom = document.getElementById(\"modal-picture\");\r\n    //     dom.classList.toggle(\"isHide\")\r\n    // }\r\n    // //ảnh bìa - đóng\r\n    // const btnCloseImageOnClick =()=>{\r\n    //     const dom = document.getElementById(\"modal-picture\");\r\n    //     dom.classList.add(\"isHide\")\r\n    //     // setimage(\"\");\r\n    // }\r\n    const showModalImage = async () => {\r\n        setImageModal(true);\r\n    };\r\n    const handleCancelImageModal = () => {\r\n        // setimage(\"\");\r\n        setImageModal(false);\r\n    };\r\n\r\n    //Ảnh bìa - chọn ảnh\r\n    const imageOnChange = (e)=>{\r\n        if(e.target.files[0]){\r\n            setimage(e.target.files[0])\r\n        }\r\n    }\r\n    //Ảnh bìa - tải lên ảnh\r\n    const btnUploadImageOnClick = ()=>{\r\n        console.log(image.name)\r\n        if(image.name){\r\n            var imgSplit = image.name.split(\".\");\r\n            var imgName = uuidv4()+\".\"+imgSplit[imgSplit.length-1];\r\n            // console.log(imgName);\r\n            const uploadTask = storage.ref(`images/${imgName}`).put(image);\r\n            uploadTask.on(\r\n                \"state_change\",\r\n                snapshot => {},\r\n                error => {\r\n                    console.log(error);\r\n                },\r\n                 () => {\r\n                    storage.ref('images')\r\n                        .child(imgName)\r\n                        .getDownloadURL()\r\n                        .then(async (url)=>{\r\n                            console.log(url);\r\n                            await updateImageTask({\r\n                                taskId:props.obj.taskId,\r\n                                urlImage:url\r\n                            }).then((res)=>{\r\n                                console.log(\"sau khi upload:\",res)\r\n                                setimage(res.data);\r\n                            });\r\n                            \r\n                        });\r\n                }\r\n            );\r\n        }else alert(\"Chwa chon anh\");\r\n    }\r\n    \r\n    /**\r\n     * Post Data\r\n     */\r\n    //post comment\r\n    const postComment = async ()=>{\r\n        const comment = {\r\n            taskId: props.obj.taskId,\r\n            content: contentCmt,\r\n            fullName:props.user.fullName\r\n\r\n        }\r\n        // debugger;\r\n        await postCommentApi({\r\n            taskId: props.obj.taskId,\r\n            content: contentCmt\r\n        }).then(res=>{\r\n            setcomments([...comments,comment]);\r\n            setcontentCmt(\"\");\r\n        });\r\n        // await api.post(\"/comment\",comment).then(res=>{\r\n        //     console.log(res);\r\n        //     setcomments([...comments,comment]);\r\n        //     setcontentCmt(\"\");\r\n        // }).catch(ex=>{\r\n        //     console.log(ex);\r\n        // })\r\n    }\r\n\r\n    //\r\n\r\n    //useeffect\r\n    useEffect(async () => {\r\n        console.log(\"obj: \",props.obj)\r\n        const dl = await getDeadlineByTaskIdApi({taskId:props.obj.taskId});\r\n        if(!dl.data){\r\n            console.log(\"Chua co dealine\")\r\n        }else{\r\n            console.log(dl.data)\r\n            setdeadlineDetail(dl.data)\r\n            setDone(dl.data.complete)\r\n            setStartDate(dl.data.startDate);\r\n            setEndDate(dl.data.endDate)\r\n            setOpenDeadline(true);\r\n        }\r\n        const getAll = async ()=>{\r\n            //comment\r\n            const allComment = await getAllComment();\r\n            if(allComment) {\r\n                console.log(allComment);\r\n                setcomments(allComment);\r\n            }\r\n                \r\n            //user_task\r\n            const allUserTask = await getAllUserTask();\r\n            if(allUserTask) \r\n                setuserTask(allUserTask);\r\n            \r\n        }\r\n        getAll();\r\n    }, [])\r\n    console.log(\"user_task: \",userTask);\r\n    return (\r\n        \r\n        <>\r\n            {/* <Modal centered width={800} visible={isModalVisible} footer={null}  onCancel={handleCancel}> */}\r\n                <img src={(image)?image:\"\"} className={(image==\"\"||image==null)?\"isHide\":\"\"} style={{width:\"100%\",height:\"400px\",margin:\"15px 0 10px 0\"}}  />\r\n                <div className=\"modal-custom\">\r\n                    <div className=\"card-left\">\r\n                        {/* Tên task */}\r\n                        <div className=\"card-left__name flex mb-10\" style={{marginTop:\"10px\"}}>\r\n                            <HomeOutlined className=\"common-icon width-10\"/>\r\n                            {/* <div className=\"name-icon width-10\">icon</div> */}\r\n                            <div className=\"name-name\">Tên thẻ</div>\r\n                        </div>\r\n\r\n                        {/* Thành viên, ngày hết hạn */}\r\n                        <div className=\"card-left__memeber flex mb-10\" style={{fontSize:\"14px\"}}>\r\n                            <div className=\"width-10\"/>\r\n                            <div className=\"memeber-memeber\" >\r\n                                <div>THÀNH VIÊN</div>\r\n                                <div>\r\n                                    {/* Duyet tat ca thanh vien */}\r\n                                    {\r\n                                        userTask.map((obj,index)=>(\r\n                                            // <button onMouseOver={()=>hoverName(obj.id)} onMouseOut={()=>hoverNameOut(obj.id)}  key={index} onClick={()=>detailUserTask(obj)} className=\"member-task\">\r\n                                            <button key={index} onClick={()=>detailUserTask(obj)} className=\"member-task\">\r\n                                                {/* <div id={\"mouseOver-\"+obj.id} className=\"isHide\" style={{position:\"absolute\",top:\"-25px\",left:\"0\", backgroundColor:\"#fff\",border:\"1px solid #000\",borderRadius:\"5px\",width:\"100px\",height:\"22px\"}}>\r\n                                                    {(obj.fullName)?obj.fullName:\"\"}\r\n                                                </div> */}\r\n                                                <Avatar\r\n                                                    style={{\r\n                                                    color: '#fff',\r\n                                                    backgroundColor: '#84ABF7',\r\n                                                    fontSize: '12px',\r\n                                                    fontWeight: '500'\r\n                                                    }}\r\n                                                >{(obj.fullName)?obj.fullName.charAt(0).toUpperCase():\"\"}\r\n                                                </Avatar>\r\n                                            </button>\r\n                                        ))\r\n                                    }\r\n                                    <button onClick={showModalUsers} className=\"member-task\">\r\n                                        <Avatar\r\n                                            style={{\r\n                                            color: '#fff',\r\n                                            backgroundColor: '#84ABF7',\r\n                                            fontSize: '12px',\r\n                                            fontWeight: '500',\r\n                                            margin: '0 0 0 2px'  \r\n                                        }}><PlusOutlined/>\r\n                                        </Avatar>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {/* new */}\r\n                            {/* deadline box */}\r\n                            {openDeadline ? (\r\n                                <div className=\"memeber-deadline\" style={{ marginLeft: \"20px\" }}>\r\n                                    <div>NGÀY HẾT HẠN</div>\r\n                                    <div className=\"box-deadline\">\r\n                                        <div className=\"time-deadline\">\r\n                                        <Checkbox on checked={done} onChange={onChangeCheckColor} />\r\n                                        <span>\r\n                                            {endDate}\r\n                                        </span>\r\n                                        {done ? (\r\n                                            <span className=\"check-done\">Done !</span>\r\n                                        ) : (\r\n                                            <div />\r\n                                        )}\r\n                                        <Dropdown\r\n                                            trigger=\"click\"\r\n                                            overlay={\r\n                                            <Button\r\n                                                onClick={handleDeleteDeadline}\r\n                                                className=\"butDelete-Deadline\"\r\n                                            >\r\n                                                Delete Deadline\r\n                                            </Button>\r\n                                            }\r\n                                            placement=\"bottomRight\"\r\n                                            arrow\r\n                                        >\r\n                                            <DownOutlined style={{ marginLeft: \"7px\" }} />\r\n                                        </Dropdown>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                ) : (\r\n                            <div />\r\n                            )}\r\n                        </div>\r\n                        \r\n                        {/* Tiêu đề mô tả: icon và chữ mô tả chi tiết */}\r\n                        <div className=\"card-left__description flex mb-10\">\r\n                            <MenuOutlined className=\"common-icon width-10\" />\r\n                            <div className=\"des-name\">Mô tả chi tiết</div>\r\n                        </div>\r\n\r\n                        {/* Ô input nhập mô tả */}\r\n                        <div className=\"card-left__des-input flex mb-10\">\r\n                            <div className=\"width-10\"></div>\r\n                            <input style={{padding:\"0 0 0 10px\"}} className=\"des-input\" placeholder=\"Mô tả công việc\" />\r\n                        </div>\r\n\r\n                        {/* Tiêu đề bình luận (Icon và Chữ Bình Luận) */}\r\n                        <div className=\"card-left__cmt flex mb-10\"  style={{marginTop:\"40px\"}}>\r\n                            <MessageOutlined className=\"width-10 common-icon\"/>\r\n                            <div className=\"cmt-name\">\r\n                                <div>Bình luận</div>\r\n                                <Button>Ẩn chi tiết</Button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        {/* Viết bình luân (Avatar và ô input) */}\r\n                        <div className=\"card-left__cmt flex mb-10\">\r\n                            {/* <div className=\"width-10 avatar\">L</div> */}\r\n                            <Avatar\r\n                                style={{\r\n                                color: '#fff',\r\n                                backgroundColor: '#84ABF7',\r\n                                fontSize: '12px',\r\n                                fontWeight: '500',\r\n                                margin: '5px 15px 0 12px'  \r\n                            }}>L\r\n                            </Avatar>\r\n                            <input onChange={commentOnChange} value={contentCmt} style={{padding:\"0 0 0 10px\"}}  className=\"cmt-input\" placeholder=\"Viết Bình Luận\"  />\r\n                        </div>\r\n\r\n                        {/* Nút bình luận */}\r\n                        <div className=\"flex mb-10\">\r\n                            <div className=\"width-10\"></div>\r\n                            <Button onClick={postComment}>Lưu</Button>\r\n                        </div>\r\n                        \r\n                        \r\n                        \r\n                        {/* Nội dung bình luận (avatar và nội dung bình luận) */}\r\n                        {\r\n                            comments.map((obj,index)=>(\r\n                                <div key={index} className=\"card-left__cmt-content flex mb-10\">\r\n                                    {/* avatar*/}\r\n                                    <Avatar\r\n                                        style={{\r\n                                        color: '#fff',\r\n                                        backgroundColor: '#84ABF7',\r\n                                        fontSize: '12px',\r\n                                        fontWeight: '500',\r\n                                        margin: '5px 15px 0 12px'  \r\n                                    }}>{(obj.fullName)?obj.fullName.charAt(0).toUpperCase():\"\"}\r\n                                    </Avatar>\r\n                                    {/* Nội dung bình luận: tên, ngày, nội dung, reaction, sửa, xoá */}\r\n                                    <div className=\"cmt-right\">\r\n                                        <div className=\"cmt-user\">\r\n                                            {/* Tên người bình luận */}\r\n                                            {obj.fullName}\r\n                                            <span className=\"cmt-date\">\r\n                                                {/* Ngày bình luận */}\r\n                                                {obj.createDate}\r\n                                            </span>\r\n                                        </div>\r\n                                        <div className=\"cmt-content\">\r\n                                            {/* Nội dung bình luận */}\r\n                                            {obj.content}\r\n                                        </div>\r\n                                        <div className=\"cmt-react\">\r\n                                            <SmileOutlined /> - Chỉnh sửa - Xoá\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        \r\n                    </div>\r\n                    {/* Bên phải modal: các chức năng */}\r\n                    <div className=\"card-right\">\r\n                        <div className=\"btn-right\">\r\n                            <Button onClick={showModalUsers} style={{width:\"100%\"}}>\r\n                                <UserAddOutlined />\r\n                                Thành viên\r\n                            </Button>\r\n                            <Modal\r\n                                width={300}\r\n                                title=\"Thành viên\"\r\n                                visible={usersModal}\r\n                                footer={null}\r\n                                onCancel={handleCancelModalUsers}\r\n                            >\r\n                            {/* <div id=\"modal-member\" className=\"isHide modal-member\"> */}\r\n                                {/* <button onClick={btnCloseOnClick} className=\"btnClose\">X</button>\r\n                                <center style={{marginTop:\"7px\", fontSize:\"14px\"}}>Thêm thành viên vào bảng</center>\r\n                                <hr style={{width:\"90%\", margin:\"10px 0 0 10px\"}} /> */}\r\n                                {/* <div className=\"search-member-input\">\r\n                                    <input type=\"text\" placeholder=\"Tìm kiếm thành viên\" />\r\n                                </div> */}\r\n                                <div className=\"title-member-board\">Thành viên của bảng</div>\r\n\r\n                                {/* Danh sachs thành viên trong bảng nhưng ko có trong task */}\r\n                                {\r\n                                    userNoTask.map((obj,index)=>(\r\n                                        <div key={index} className=\"memeber-list\">\r\n                                            <button onClick={()=>btnAddMemberTask(obj)} className=\"btn-member-task\">\r\n                                                <Avatar className=\"avatar\">{(obj.fullName)?(obj.fullName.charAt(0).toUpperCase()):\"\"}</Avatar>\r\n                                                {obj.fullName}\r\n                                            </button>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n\r\n                                <div className=\"title-member-board\">Thành viên của Task</div>\r\n                                {\r\n                                    userTask.map((obj,index)=>(\r\n                                        <div key={index} className=\"memeber-list\">\r\n                                            <button onClick={()=>detailUserTask(obj)} className=\"btn-member-task\">\r\n                                                <Avatar className=\"avatar\">{(obj.fullName)?(obj.fullName.charAt(0).toUpperCase()):\"\"}</Avatar>\r\n                                                {obj.fullName}\r\n                                            </button>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            {/* </div> */}\r\n                            </Modal>\r\n                        </div>\r\n\r\n                        {/* new */}\r\n                        {/* Deadline */}\r\n                        <div className=\"btn-right\">\r\n                            <Button onClick={showModalDead} style={{ width: \"100%\" }}>\r\n                                <FieldTimeOutlined />\r\n                                Ngày\r\n                            </Button>\r\n                            <Modal\r\n                                width={300}\r\n                                title=\"Deadline\"\r\n                                visible={isModalDeadVisible}\r\n                                footer={null}\r\n                                onCancel={handleCancelDead}\r\n                            >\r\n                                <div>\r\n                                <Form>\r\n                                    <div className=\"title-date\">\r\n                                    <h4>Start Date</h4>\r\n                                    <h4 style={{ marginLeft: \"68px\" }}>End Date</h4>\r\n                                    </div>\r\n                                    <RangePicker\r\n                                        defaultValue={[moment(startDate, dateFormat), moment(endDate, dateFormat)]}\r\n                                        format={dateFormat}\r\n                                        onChange={getDateValue}  />\r\n                                    <br />\r\n                                    <Button\r\n                                        onClick={handleSaveDeadline}\r\n                                        style={{ marginTop: \"15px\" }}\r\n                                        type=\"primary\"\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                </Form>\r\n                                </div>\r\n                            </Modal>\r\n                        </div>\r\n\r\n                        <div className=\"btn-right\">\r\n                            <Button onClick={showModalImage} style={{width:\"100%\"}}>\r\n                                <PictureOutlined />\r\n                                Ảnh Bìa\r\n                            </Button>\r\n                            <Modal\r\n                                width={400}\r\n                                title=\"Ảnh bìa\"\r\n                                visible={imageModal}\r\n                                footer={null}\r\n                                onCancel={handleCancelImageModal}\r\n                            >\r\n                            {/* <div id=\"modal-picture\" className=\"modal-member isHide\"> */}\r\n                                {/* <button onClick={btnCloseImageOnClick} className=\"btnClose\">X</button> */}\r\n                                {/* <center style={{marginTop:\"7px\", fontSize:\"14px\"}}>Ảnh bìa</center>\r\n                                <hr style={{width:\"90%\", margin:\"10px 0 0 10px\"}} /> */}\r\n                                \r\n                                <div className=\"title-member-board\">Tệp Đính Kèm</div>\r\n                                \r\n                                <input onChange={imageOnChange} style={{marginLeft:\"13px\"}} type=\"file\" accept=\"image/*\"/>\r\n                                <Button onClick={btnUploadImageOnClick} style={{width:\"90%\",margin:\"20px 0 0 13px\"}}>Upload</Button>\r\n                                <img className={(image==\"\"||image==null)?\"isHide\":\"\"} style={{width:\"300px\",height:\"150px\",margin:\"10px 0 0 20px\"}} src={(image)?image:\"\"} />\r\n                                {/* <img src={(image)?image:\"\"} className={(image==\"\")?\"isHide\":\"\"} style={{width:\"100%\",height:\"400px\",margin:\"15px 0 10px 0\"}}  /> */}\r\n                            {/* </div> */}\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {/* </Modal>           */}\r\n       \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task;","E:\\Blameo\\BaseProject\\React\\Ha\\trello-fe\\src\\firebase\\firebase-config.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":5,"column":16,"nodeType":"133","messageId":"134","endLine":5,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":53,"column":8,"nodeType":"137","endLine":53,"endColumn":10,"suggestions":"138"},{"ruleId":"131","severity":1,"message":"139","line":5,"column":16,"nodeType":"133","messageId":"134","endLine":5,"endColumn":24},{"ruleId":"131","severity":1,"message":"140","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":26},{"ruleId":"131","severity":1,"message":"141","line":3,"column":40,"nodeType":"133","messageId":"134","endLine":3,"endColumn":45},{"ruleId":"131","severity":1,"message":"142","line":3,"column":47,"nodeType":"133","messageId":"134","endLine":3,"endColumn":52},{"ruleId":"131","severity":1,"message":"143","line":5,"column":8,"nodeType":"133","messageId":"134","endLine":5,"endColumn":12},{"ruleId":"131","severity":1,"message":"144","line":6,"column":16,"nodeType":"133","messageId":"134","endLine":6,"endColumn":22},{"ruleId":"131","severity":1,"message":"145","line":8,"column":92,"nodeType":"133","messageId":"134","endLine":8,"endColumn":99},{"ruleId":"131","severity":1,"message":"146","line":57,"column":12,"nodeType":"133","messageId":"134","endLine":57,"endColumn":21},{"ruleId":"131","severity":1,"message":"147","line":57,"column":23,"nodeType":"133","messageId":"134","endLine":57,"endColumn":35},{"ruleId":"131","severity":1,"message":"148","line":59,"column":12,"nodeType":"133","messageId":"134","endLine":59,"endColumn":29},{"ruleId":"131","severity":1,"message":"149","line":94,"column":11,"nodeType":"133","messageId":"134","endLine":94,"endColumn":27},{"ruleId":"150","severity":1,"message":"151","line":143,"column":22,"nodeType":"152","messageId":"153","endLine":143,"endColumn":24},{"ruleId":"154","severity":1,"message":"155","line":170,"column":25,"nodeType":"156","messageId":"157","endLine":173,"endColumn":18},{"ruleId":"131","severity":1,"message":"158","line":236,"column":13,"nodeType":"133","messageId":"134","endLine":236,"endColumn":16},{"ruleId":"135","severity":1,"message":"159","line":252,"column":15,"nodeType":"156","endLine":263,"endColumn":6},{"ruleId":"135","severity":1,"message":"160","line":263,"column":8,"nodeType":"137","endLine":263,"endColumn":10,"suggestions":"161"},{"ruleId":"150","severity":1,"message":"162","line":374,"column":90,"nodeType":"152","messageId":"153","endLine":374,"endColumn":92},{"ruleId":"150","severity":1,"message":"151","line":406,"column":68,"nodeType":"152","messageId":"153","endLine":406,"endColumn":70},{"ruleId":"135","severity":1,"message":"163","line":24,"column":8,"nodeType":"137","endLine":24,"endColumn":10,"suggestions":"164"},{"ruleId":"131","severity":1,"message":"165","line":3,"column":17,"nodeType":"133","messageId":"134","endLine":3,"endColumn":27},{"ruleId":"131","severity":1,"message":"165","line":18,"column":9,"nodeType":"133","messageId":"134","endLine":18,"endColumn":19},{"ruleId":"131","severity":1,"message":"145","line":29,"column":181,"nodeType":"133","messageId":"134","endLine":29,"endColumn":188},{"ruleId":"131","severity":1,"message":"166","line":30,"column":10,"nodeType":"133","messageId":"134","endLine":30,"endColumn":16},{"ruleId":"131","severity":1,"message":"167","line":33,"column":12,"nodeType":"133","messageId":"134","endLine":33,"endColumn":26},{"ruleId":"131","severity":1,"message":"168","line":35,"column":11,"nodeType":"133","messageId":"134","endLine":35,"endColumn":20},{"ruleId":"131","severity":1,"message":"169","line":43,"column":11,"nodeType":"133","messageId":"134","endLine":43,"endColumn":23},{"ruleId":"131","severity":1,"message":"170","line":60,"column":12,"nodeType":"133","messageId":"134","endLine":60,"endColumn":21},{"ruleId":"171","severity":1,"message":"172","line":125,"column":9,"nodeType":"173","messageId":"174","endLine":127,"endColumn":10},{"ruleId":"131","severity":1,"message":"175","line":141,"column":11,"nodeType":"133","messageId":"134","endLine":141,"endColumn":20},{"ruleId":"131","severity":1,"message":"176","line":150,"column":11,"nodeType":"133","messageId":"134","endLine":150,"endColumn":17},{"ruleId":"150","severity":1,"message":"151","line":250,"column":22,"nodeType":"152","messageId":"153","endLine":250,"endColumn":24},{"ruleId":"135","severity":1,"message":"159","line":353,"column":15,"nodeType":"156","endLine":381,"endColumn":6},{"ruleId":"135","severity":1,"message":"177","line":381,"column":8,"nodeType":"137","endLine":381,"endColumn":10,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":387,"column":17,"nodeType":"181","endLine":387,"endColumn":158},{"ruleId":"150","severity":1,"message":"151","line":387,"column":62,"nodeType":"152","messageId":"153","endLine":387,"endColumn":64},{"ruleId":"179","severity":1,"message":"180","line":665,"column":33,"nodeType":"181","endLine":665,"endColumn":174},{"ruleId":"150","severity":1,"message":"151","line":665,"column":55,"nodeType":"152","messageId":"153","endLine":665,"endColumn":57},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["184"],"'Redirect' is defined but never used.","'useEffect' is defined but never used.","'Input' is defined but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","'uuidv4' is defined but never used.","'testApi' is defined but never used.","'userInfor' is assigned a value but never used.","'setuserInfor' is assigned a value but never used.","'isModalUserDetail' is assigned a value but never used.","'handleCancelDead' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'user_b'.","ArrowFunctionExpression","unsafeRefs","'arr' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'getAllUsers' and 'id.id'. Either include them or remove the dependency array.",["185"],"Expected '!==' and instead saw '!='.","React Hook useCallback has a missing dependency: 'reload'. Either include it or remove the dependency array.",["186"],"'Typography' is defined but never used.","'logDOM' is defined but never used.","'isModalVisible' is assigned a value but never used.","'showModal' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'colorDone' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'styleTask' is assigned a value but never used.","'solves' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllComment', 'getAllUserTask', and 'props.obj'. Either include them or remove the dependency array.",["187"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [getData]",{"range":"196","text":"197"},"Update the dependencies array to be: [getAllUsers, id.id]",{"range":"198","text":"199"},"Update the dependencies array to be: [reload]",{"range":"200","text":"201"},"Update the dependencies array to be: [getAllComment, getAllUserTask, props.obj]",{"range":"202","text":"203"},[1721,1723],"[getData]",[7928,7930],"[getAllUsers, id.id]",[1041,1043],"[reload]",[12124,12126],"[getAllComment, getAllUserTask, props.obj]"]